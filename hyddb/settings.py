"""
Django settings for hyddb project.

Generated by 'django-admin startproject' using Django 1.8.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.8/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.8/ref/settings/
"""

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os
from pathlib import Path

from django.conf.global_settings import DEBUG

# import socket
# socket.getaddrinfo("127.0.0.1", 8000)


def str_to_bool(s):
    return True if s.lower() in ["true", "yes"] else False


# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.8/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "secret_key")

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = str_to_bool(os.getenv("DEBUG", "")) # original
DEBUG = True

ALLOWED_HOSTS = ["*"]  # original
# ALLOWED_HOSTS = ["127.0.0.1"]  # NOTE: new

# Admins
ADMINS = []

# Application definition

INSTALLED_APPS = (
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_filters",
    "django_tables2",
    "crispy_forms",
    "bootstrap3",
    "common",
    "browser",
    "classifier",
)

MIDDLEWARE_CLASSES = [
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.SessionAuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django.middleware.security.SecurityMiddleware",
]

ROOT_URLCONF = "hyddb.urls"  # original
# ROOT_URLCONF = ""
# CELERY_BROKER_URL = "amqp://localhost"  # NOTE: added as test
CELERY_BROKER_URL = "amqp://guest:guest@localhost:5672//"  # NOTE: added as test
# CELERY_BROKER_URL = "amqp://127.0.0.1:8000//"  # NOTE: added as test
# CELERY_BROKER_URL = "amqp://guest:guest@172.17.0.2:5672//"  # NOTE: added as test
# CELERY_BROKER_URL = "amqp://0.0.0.0:5672//"  # NOTE: added as test
# CELERY_BROKER_URL = "amqp://guest:guest@rabbitmq:5672//"  # NOTE: added as test

# NOTE: new Celery settings
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"


TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django.template.context_processors.request",
            ],
        },
    },
]

WSGI_APPLICATION = "hyddb.wsgi.application"


# Database
# https://docs.djangoproject.com/en/1.8/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        # "NAME": "/db/db.sqlite3",
        "NAME": str(
            BASE_DIR.joinpath("db.sqlite3")
        ),  # for running locally - no-docker branch
        # "NAME": "hyddb",
        "USER": "user",
        "PASSWORD": "password",
        # "HOST": "127.0.0.1",
        # "HOST": "192.168.0.1",
        "HOST": "",
        # "PORT": "8000",
        "PORT": "",
    }
}

# Caching
# https://docs.djangoproject.com/en/1.8/topics/cache/

USE_CACHING = str_to_bool(os.getenv("USE_CACHING", "True"))
if USE_CACHING:
    CACHES = {
        "default": {
            "BACKEND": "redis_cache.RedisCache",
            "LOCATION": "redis:6379",
        }
    }
else:
    CACHES = {
        "default": {
            "BACKEND": "django.core.cache.backends.dummy.DummyCache",
        }
    }

# Sessions
SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"

# Internationalization
# https://docs.djangoproject.com/en/1.8/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Copenhagen"

USE_I18N = False

USE_L10N = False

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.8/howto/static-files/

# STATIC_URL = "/static/" # original
# STATIC_ROOT = "/static" # original
# STATIC_URL = os.path.join(BASE_DIR, "static")
STATIC_ROOT = str(BASE_DIR.joinpath("static"))
STATIC_URL = "/static/"

# MEDIA_URL = "/media/" # original
# MEDIA_ROOT = "/media" # original
# MEDIA_URL = os.path.join(BASE_DIR, "media")
MEDIA_ROOT = str(BASE_DIR.joinpath("media"))
MEDIA_URL = "/media/"

# Crispy Forms
CRISPY_TEMPLATE_PACK = "bootstrap3"

# Classifier
# BLASTDB = os.path.join("/blastdb", "blast.db") # original
# DOWNSTREAMDB = os.path.join("/blastdb", "downstream.db") # original
BLASTDB = str(BASE_DIR.joinpath("blast.db"))
DOWNSTREAMDB = str(BASE_DIR.joinpath("downstream.db"))

# Subdirectory
USE_X_FORWARDED_HOST = str_to_bool(os.getenv("USE_X_FORWARDED_HOST", "True"))

# FORCE_SCRIPT_NAME = os.getenv("FORCE_SCRIPT_NAME", "/hyddb/") # original, is forcing url to be "hyddb"

# _prefix = FORCE_SCRIPT_NAME or ""  # original
_prefix = ""
MEDIA_URL = _prefix + MEDIA_URL
STATIC_URL = _prefix + STATIC_URL

# Email
SERVER_EMAIL = "noreply@services.birc.au.dk"

# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "console": {
#             "class": "logging.StreamHandler",
#         },
#     },
#     "root": {
#         "handlers": ["console"],
#         "level": "WARNING",
#     },
# }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": os.getenv("DJANGO_LOG_LEVEL", "INFO"),
            "propagate": False,
        },
    },
}

if DEBUG:
    # EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"
    for logger in LOGGING["loggers"]:
        LOGGING["loggers"][logger]["handlers"] = ["console"]
# else:
#     EMAIL_HOST = os.getenv("EMAIL_HOST", "")
#     EMAIL_PORT = int(os.getenv("EMAIL_PORT", "25"))
